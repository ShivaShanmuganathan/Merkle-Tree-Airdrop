/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleAirdrop, MerkleAirdropInterface } from "../MerkleAirdrop";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "canClaim",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516108c33803806108c383398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a0516108136100b060003960008181608901526101a601526000818160f6015261028901526108136000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318894daf1461005c5780632eb4a7ab14610084578063b391c508146100b9578063c884ef83146100ce578063fc0c546a146100f1575b600080fd5b61006f61006a36600461064d565b610130565b60405190151581526020015b60405180910390f35b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161007b565b6100cc6100c73660046106a0565b6101f1565b005b61006f6100dc3660046106e2565b60006020819052908152604090205460ff1681565b6101187f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007b565b6001600160a01b03831660009081526020819052604081205460ff161580156101e757506101e7838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608a901b1660208201527f000000000000000000000000000000000000000000000000000000000000000092506034019050604051602081830303815290604052805190602001206102ef565b90505b9392505050565b6101fc338383610130565b6102695760405162461bcd60e51b815260206004820152603360248201527f4d65726b6c6541697264726f703a2041646472657373206973206e6f7420612060448201527263616e64696461746520666f7220636c61696d60681b60648201526084015b60405180910390fd5b336000818152602081905260409020805460ff191660011790556102c0907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690670de0b6b3a7640000610305565b60405133907f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc90600090a25050565b6000826102fc858461035c565b14949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610357908490610408565b505050565b600081815b845181101561040057600085828151811061037e5761037e6106fd565b602002602001015190508083116103c05760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506103ed565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806103f881610713565b915050610361565b509392505050565b600061045d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104da9092919063ffffffff16565b805190915015610357578080602001905181019061047b919061073c565b6103575760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610260565b60606101e7848460008585843b6105335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610260565b600080866001600160a01b0316858760405161054f919061078e565b60006040518083038185875af1925050503d806000811461058c576040519150601f19603f3d011682016040523d82523d6000602084013e610591565b606091505b50915091506105a18282866105ac565b979650505050505050565b606083156105bb5750816101ea565b8251156105cb5782518084602001fd5b8160405162461bcd60e51b815260040161026091906107aa565b80356001600160a01b03811681146105fc57600080fd5b919050565b60008083601f84011261061357600080fd5b50813567ffffffffffffffff81111561062b57600080fd5b6020830191508360208260051b850101111561064657600080fd5b9250929050565b60008060006040848603121561066257600080fd5b61066b846105e5565b9250602084013567ffffffffffffffff81111561068757600080fd5b61069386828701610601565b9497909650939450505050565b600080602083850312156106b357600080fd5b823567ffffffffffffffff8111156106ca57600080fd5b6106d685828601610601565b90969095509350505050565b6000602082840312156106f457600080fd5b6101ea826105e5565b634e487b7160e01b600052603260045260246000fd5b600060001982141561073557634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561074e57600080fd5b815180151581146101ea57600080fd5b60005b83811015610779578181015183820152602001610761565b83811115610788576000848401525b50505050565b600082516107a081846020870161075e565b9190910192915050565b60208152600082518060208401526107c981604085016020870161075e565b601f01601f1916919091016040019291505056fea26469706673582212207f247c5c893dbfa0ba9857e81fd37e30c529930dc088e91b15c24887a39ec57a64736f6c634300080b0033";

type MerkleAirdropConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleAirdropConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleAirdrop__factory extends ContractFactory {
  constructor(...args: MerkleAirdropConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MerkleAirdrop";
  }

  deploy(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleAirdrop> {
    return super.deploy(
      _token,
      _merkleRoot,
      overrides || {}
    ) as Promise<MerkleAirdrop>;
  }
  getDeployTransaction(
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _merkleRoot, overrides || {});
  }
  attach(address: string): MerkleAirdrop {
    return super.attach(address) as MerkleAirdrop;
  }
  connect(signer: Signer): MerkleAirdrop__factory {
    return super.connect(signer) as MerkleAirdrop__factory;
  }
  static readonly contractName: "MerkleAirdrop";
  public readonly contractName: "MerkleAirdrop";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleAirdropInterface {
    return new utils.Interface(_abi) as MerkleAirdropInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleAirdrop {
    return new Contract(address, _abi, signerOrProvider) as MerkleAirdrop;
  }
}
